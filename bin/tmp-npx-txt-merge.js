#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const yargs = require("yargs");
const path = require("path");
const index_1 = require("../index");
const PACKAGE_JSON = require("../package.json");
const updateNotifier = require("update-notifier");
const debug_color2_1 = require("debug-color2");
const console = new debug_color2_1.Console(null, {
    enabled: true,
    inspectOptions: {
        colors: true,
    },
    chalkOptions: {
        enabled: true,
    },
});
console.enabledColor = true;
const CWD = process.cwd();
updateNotifier({
    pkg: PACKAGE_JSON,
}).notify();
let cli = yargs
    .default({
//input: process.cwd(),
})
    .option('input', {
    alias: ['i'],
    //demandOption: true,
    requiresArg: true,
    normalize: true,
    type: 'string',
    desc: 'source novel txt folder path',
})
    .option('output', {
    alias: ['o'],
    //demandOption: true,
    requiresArg: true,
    normalize: true,
    type: 'string',
    desc: ' output path',
    default: function () {
        return CWD;
    },
})
    .option('zh', {
    //default: true,
    boolean: true,
})
    // @ts-ignore
    .command('$0', '', function (yargs) {
    if (yargs.argv.zh) {
        yargs.locale('zh_CN');
    }
    let inputPath = yargs.argv.input || yargs.argv._[0] || CWD;
    let outputPath = yargs.argv.output;
    if (!path.isAbsolute(inputPath)) {
        inputPath = path.join(CWD, inputPath);
    }
    if (!path.isAbsolute(outputPath)) {
        outputPath = path.join(CWD, outputPath);
    }
    console.log(`currentPath:\n  `, inputPath);
    console.log(`inputPath:\n  `, inputPath);
    console.log(`outputPath:\n  `, outputPath);
    if (inputPath.indexOf(__dirname) == 0 || outputPath.indexOf(__dirname) == 0) {
        console.error(`[FAIL] path not allow`);
        yargs.showHelp();
        process.exit(1);
        return;
    }
    console.log(`\n`);
    //console.log(666, yargs.argv);
    return index_1.default(inputPath, outputPath);
    //yargs.showHelp('log');
})
    .version()
    //.help()
    .argv;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG1wLW5weC10eHQtbWVyZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0bXAtbnB4LXR4dC1tZXJnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSwrQkFBZ0M7QUFDaEMsNkJBQThCO0FBRTlCLG9DQUFnQztBQUNoQyxnREFBaUQ7QUFDakQsa0RBQW1EO0FBQ25ELCtDQUF1QztBQUN2QyxNQUFNLE9BQU8sR0FBRyxJQUFJLHNCQUFPLENBQUMsSUFBSSxFQUFFO0lBQ2pDLE9BQU8sRUFBRSxJQUFJO0lBQ2IsY0FBYyxFQUFFO1FBQ2YsTUFBTSxFQUFFLElBQUk7S0FDWjtJQUNELFlBQVksRUFBRTtRQUNiLE9BQU8sRUFBRSxJQUFJO0tBQ2I7Q0FDRCxDQUFDLENBQUM7QUFFSCxPQUFPLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztBQUU1QixNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFMUIsY0FBYyxDQUFDO0lBQ2QsR0FBRyxFQUFFLFlBQVk7Q0FDakIsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBRVosSUFBSSxHQUFHLEdBQUcsS0FBSztLQUNiLE9BQU8sQ0FBQztBQUNSLHVCQUF1QjtDQUN2QixDQUFDO0tBQ0QsTUFBTSxDQUFDLE9BQU8sRUFBRTtJQUNoQixLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUM7SUFDWixxQkFBcUI7SUFDckIsV0FBVyxFQUFFLElBQUk7SUFDakIsU0FBUyxFQUFFLElBQUk7SUFDZixJQUFJLEVBQUUsUUFBUTtJQUNkLElBQUksRUFBRSw4QkFBOEI7Q0FPcEMsQ0FBQztLQUNELE1BQU0sQ0FBQyxRQUFRLEVBQUU7SUFDakIsS0FBSyxFQUFFLENBQUMsR0FBRyxDQUFDO0lBQ1oscUJBQXFCO0lBQ3JCLFdBQVcsRUFBRSxJQUFJO0lBQ2pCLFNBQVMsRUFBRSxJQUFJO0lBQ2YsSUFBSSxFQUFFLFFBQVE7SUFDZCxJQUFJLEVBQUUsY0FBYztJQUNwQixPQUFPLEVBQUU7UUFFUixPQUFPLEdBQUcsQ0FBQztJQUNaLENBQUM7Q0FDRCxDQUFDO0tBQ0QsTUFBTSxDQUFDLElBQUksRUFBRTtJQUNiLGdCQUFnQjtJQUNoQixPQUFPLEVBQUUsSUFBSTtDQUNiLENBQUM7SUFDRixhQUFhO0tBQ1osT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLEVBQUUsVUFBVSxLQUFLO0lBRWpDLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQ2pCO1FBQ0MsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUN0QjtJQUVELElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQztJQUMzRCxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQXVCLENBQUM7SUFFcEQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQy9CO1FBQ0MsU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0tBQ3RDO0lBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQ2hDO1FBQ0MsVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0tBQ3hDO0lBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMzQyxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFM0MsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFDM0U7UUFDQyxPQUFPLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFFdkMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRWpCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFaEIsT0FBTztLQUNQO0lBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVsQiwrQkFBK0I7SUFFL0IsT0FBTyxlQUFRLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBRXZDLHdCQUF3QjtBQUN6QixDQUFDLENBQUM7S0FDRCxPQUFPLEVBQUU7SUFDVixTQUFTO0tBQ1IsSUFBSSxDQUNMIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuXG5pbXBvcnQgeWFyZ3MgPSByZXF1aXJlKCd5YXJncycpO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5pbXBvcnQgUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG5pbXBvcnQgdHh0TWVyZ2UgZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IFBBQ0tBR0VfSlNPTiA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpO1xuaW1wb3J0IHVwZGF0ZU5vdGlmaWVyID0gcmVxdWlyZSgndXBkYXRlLW5vdGlmaWVyJyk7XG5pbXBvcnQgeyBDb25zb2xlIH0gZnJvbSAnZGVidWctY29sb3IyJztcbmNvbnN0IGNvbnNvbGUgPSBuZXcgQ29uc29sZShudWxsLCB7XG5cdGVuYWJsZWQ6IHRydWUsXG5cdGluc3BlY3RPcHRpb25zOiB7XG5cdFx0Y29sb3JzOiB0cnVlLFxuXHR9LFxuXHRjaGFsa09wdGlvbnM6IHtcblx0XHRlbmFibGVkOiB0cnVlLFxuXHR9LFxufSk7XG5cbmNvbnNvbGUuZW5hYmxlZENvbG9yID0gdHJ1ZTtcblxuY29uc3QgQ1dEID0gcHJvY2Vzcy5jd2QoKTtcblxudXBkYXRlTm90aWZpZXIoe1xuXHRwa2c6IFBBQ0tBR0VfSlNPTixcbn0pLm5vdGlmeSgpO1xuXG5sZXQgY2xpID0geWFyZ3Ncblx0LmRlZmF1bHQoe1xuXHRcdC8vaW5wdXQ6IHByb2Nlc3MuY3dkKCksXG5cdH0pXG5cdC5vcHRpb24oJ2lucHV0Jywge1xuXHRcdGFsaWFzOiBbJ2knXSxcblx0XHQvL2RlbWFuZE9wdGlvbjogdHJ1ZSxcblx0XHRyZXF1aXJlc0FyZzogdHJ1ZSxcblx0XHRub3JtYWxpemU6IHRydWUsXG5cdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0ZGVzYzogJ3NvdXJjZSBub3ZlbCB0eHQgZm9sZGVyIHBhdGgnLFxuXHRcdC8qXG5cdFx0ZGVmYXVsdDogZnVuY3Rpb24gKClcblx0XHR7XG5cdFx0XHQvL3JldHVybiBwcm9jZXNzLmN3ZCgpO1xuXHRcdH0sXG5cdFx0Ki9cblx0fSlcblx0Lm9wdGlvbignb3V0cHV0Jywge1xuXHRcdGFsaWFzOiBbJ28nXSxcblx0XHQvL2RlbWFuZE9wdGlvbjogdHJ1ZSxcblx0XHRyZXF1aXJlc0FyZzogdHJ1ZSxcblx0XHRub3JtYWxpemU6IHRydWUsXG5cdFx0dHlwZTogJ3N0cmluZycsXG5cdFx0ZGVzYzogJyBvdXRwdXQgcGF0aCcsXG5cdFx0ZGVmYXVsdDogZnVuY3Rpb24gKClcblx0XHR7XG5cdFx0XHRyZXR1cm4gQ1dEO1xuXHRcdH0sXG5cdH0pXG5cdC5vcHRpb24oJ3poJywge1xuXHRcdC8vZGVmYXVsdDogdHJ1ZSxcblx0XHRib29sZWFuOiB0cnVlLFxuXHR9KVxuXHQvLyBAdHMtaWdub3JlXG5cdC5jb21tYW5kKCckMCcsICcnLCBmdW5jdGlvbiAoeWFyZ3MpXG5cdHtcblx0XHRpZiAoeWFyZ3MuYXJndi56aClcblx0XHR7XG5cdFx0XHR5YXJncy5sb2NhbGUoJ3poX0NOJyk7XG5cdFx0fVxuXG5cdFx0bGV0IGlucHV0UGF0aCA9IHlhcmdzLmFyZ3YuaW5wdXQgfHwgeWFyZ3MuYXJndi5fWzBdIHx8IENXRDtcblx0XHRsZXQgb3V0cHV0UGF0aCA9IHlhcmdzLmFyZ3Yub3V0cHV0IGFzIGFueSBhcyBzdHJpbmc7XG5cblx0XHRpZiAoIXBhdGguaXNBYnNvbHV0ZShpbnB1dFBhdGgpKVxuXHRcdHtcblx0XHRcdGlucHV0UGF0aCA9IHBhdGguam9pbihDV0QsIGlucHV0UGF0aCk7XG5cdFx0fVxuXG5cdFx0aWYgKCFwYXRoLmlzQWJzb2x1dGUob3V0cHV0UGF0aCkpXG5cdFx0e1xuXHRcdFx0b3V0cHV0UGF0aCA9IHBhdGguam9pbihDV0QsIG91dHB1dFBhdGgpO1xuXHRcdH1cblxuXHRcdGNvbnNvbGUubG9nKGBjdXJyZW50UGF0aDpcXG4gIGAsIGlucHV0UGF0aCk7XG5cdFx0Y29uc29sZS5sb2coYGlucHV0UGF0aDpcXG4gIGAsIGlucHV0UGF0aCk7XG5cdFx0Y29uc29sZS5sb2coYG91dHB1dFBhdGg6XFxuICBgLCBvdXRwdXRQYXRoKTtcblxuXHRcdGlmIChpbnB1dFBhdGguaW5kZXhPZihfX2Rpcm5hbWUpID09IDAgfHwgb3V0cHV0UGF0aC5pbmRleE9mKF9fZGlybmFtZSkgPT0gMClcblx0XHR7XG5cdFx0XHRjb25zb2xlLmVycm9yKGBbRkFJTF0gcGF0aCBub3QgYWxsb3dgKTtcblxuXHRcdFx0eWFyZ3Muc2hvd0hlbHAoKTtcblxuXHRcdFx0cHJvY2Vzcy5leGl0KDEpO1xuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc29sZS5sb2coYFxcbmApO1xuXG5cdFx0Ly9jb25zb2xlLmxvZyg2NjYsIHlhcmdzLmFyZ3YpO1xuXG5cdFx0cmV0dXJuIHR4dE1lcmdlKGlucHV0UGF0aCwgb3V0cHV0UGF0aCk7XG5cblx0XHQvL3lhcmdzLnNob3dIZWxwKCdsb2cnKTtcblx0fSlcblx0LnZlcnNpb24oKVxuXHQvLy5oZWxwKClcblx0LmFyZ3ZcbjtcbiJdfQ==